#!/usr/bin/env bash

unset -f pushd
pushd () {
    command pushd "$@" > /dev/null
}

unset -f popd
popd () {
    command popd "$@" > /dev/null
}

unset -f print_replace_line
print_replace_line (){
   printf "\r\033[K$1" $2 $3 $4;
}
unset -f deb_leave_only_the_most_recent_version_file
deb_leave_only_the_most_recent_version_file(){
        cd $1
#       echo current directory: $(pwd)
        echo ' '
        echo '======================================'
	echo   Checking for previous DEB versions in $1
        echo '======================================'
	echo $DATETIME >> removed_old_versions.txt

	for pkg in $(find *.deb -maxdepth 1  -type f  | cut -d _ -f 1 | sort -u ); do
	    files=$(find "$pkg"\_* -maxdepth 1  -type f | sort -ur )
	    count=$( echo "$files" | wc -l)
	    if [[ $count -gt 1 ]] ; then
		rmfiles= "$(echo $files | cut -d " " -f 2-  )"
		echo $pkg has $count versions
                #rm -vf $rmfiles
		# to do keep i386 file when amd64 exists
	        for f in $rmfiles; do
	            rm -vf $f >> removed_old_versions.txt
		done
	    fi
	done
}

# deb file name in $1
unset -f deb_check_if_file_is_installed
deb_check_if_file_is_installed(){
   package="$(dpkg-deb -f  $1    2>log_dpkg-deb-f.txt | grep Package | cut -d ":" -f2) "    #
   installed="$(dpkg -s $package 2>log_dpkg-s.txt | grep Status: | grep installed )" #
   if  [[ "$installed"  != "" ]] ; then
      echo 'yes'
   fi
}

# filename of a list of .bed URL in $1
# in (optional) directory  $2
# uninstall if $3 is 'remove'
unset -f deb_install_packages_from_file_URL_list
deb_install_packages_from_file_URL_list(){
  action
  readarray files < $1
  if [[ $2 != '' ]] ; then
     mkdir -p "$2"
     pushd "$2"
  fi
  if [[ $3 == remove ]] ; then
     action="Remove .deb packages defined in $1 from $2 "
  else
     action="Download in $2 .deb packages defined in $1"
  fi

  echo "--------------------------------------------------------------------------------"
  echo " $action"
  echo "--------------------------------------------------------------------------------"

  for f in "${files[@]}"; do
    if [[ ! $f ]]  ; then
       continue
    fi

    filename="$(basename $f)"
    printf "\nCheck $filename"
    if [[ ! -f $filename ]]; then
       print_replace_line "Downloading ${Yellow}$filename${NC}"
       wget -q -N $f
    fi

    if [[ ! -f $filename ]]; then
       print_replace_line "File not found $f"
       continue
    fi

    package="$(dpkg-deb -f  $filename   | grep Package | cut -d ":" -f2 )"
    is_installed=$(deb_check_if_file_is_installed $filename)

    print_replace_line "$package "
    if [[ $3 == remove ]] ; then
       if [[ $is_installed == yes  ]] ; then
            print_replace_line "Removing  ${Red}$package...${NC}"
            done=$(sudo aptitude -y purge $package)
            print_replace_line "${Red}Removed:${NC}   %-20s ($filename)" $package
       else
            print_replace_line "${On_Red}Not found:${NC} %-20s ($filename), not removed" $package
       fi
    else
        if [[ $is_installed == yes ]] ; then
           print_replace_line "Installed:  %-20s ($filename) ${Green}already${NC}" $package
        else
            print_replace_line "Installing:${Green}$package...${NC}"
            sudo gdebi -q -n -o APT::Install-Recommends=1 "$filename" 1>null 2>log-gdebi.txt
            #sudo apt-get install -fy
            print_replace_line "${Green}Installed:${NC}  %-20s ($filename)" $package
        fi
     fi
  done
  if [[ $2 != '' ]] ; then
     popd
  fi
  echo ' '
}

####################################################

# $1 file.deb
unset -f deb_get_package_name_from_file
deb_get_package_name_from_file(){
   if [[ ! -f $1 ]]; then
        echo "n"
   else
       package_info="$(dpkg-deb -f  $1  2>log_dpkg-deb-f.txt )"
       regex='Package:\s+(\w+)\s'
       if [[ $package_info =~ $regex ]] ; then
           echo ${BASH_REMATCH[1]}
       else
            echo '?' ${BASH_REMATCH[1]} $package_info
       fi
   fi
}

# deb file name in $1
unset -f deb_check_if_file_installed2
deb_check_if_file_installed2(){
   local package=$(deb_get_package_name_from_file $1)
   if [ -z $package ]; then
        echo ''
   else
       regex='Status:\s?(install ok)'
       installed_info="$(dpkg -s $package 2>log_dpkg-s.txt)"

       if [[ $installed_info  =~ $regex  ]]; then
          echo $package "yes"
       else
          echo $package  "no"
       fi
   fi
}


# filename of a list of .bed URL in $1
# in (optional) directory  $2
# uninstall if $3 is 'remove'
unset -f deb_install_packages_from_file_URL_list2
deb_install_packages_from_file_URL_list2(){
  local action=''
  local files=''
  readarray files < $1
  if [ -n $2 ] ; then
     mkdir -p "$2"
     pushd "$2"
  fi

  if [[ $3 == remove ]] ; then
     action="Remove .deb packages defined in $1 from $2 "
  else
     action="Download in $2 .deb packages defined in $1"
  fi

  echo "--------------------------------------------------------------------------------"
  echo  $action
  echo "--------------------------------------------------------------------------------"

  for f in "${files[@]}"; do
    if [ ! -n $f ] ; then  continue;  fi

    filename="$(basename $f)"
    printf "\nCheck $filename"
    if [[ ! -f $filename ]]; then
       print_replace_line "Downloading ${Yellow}$filename${NC}"
       wget -q -N $f
    fi

    if [[ ! -f $filename ]]; then
       print_replace_line "File not found $f"
       continue
    fi
    echo "dbug 1"
    package="$(dpkg-deb -f  $filename   | grep Package | cut -d ":" -f2 )"

    print_replace_line "$package "
    if [[ $3 == remove ]] ; then
       if [[$(deb_check_if_file_installed $filename) == 'yes'  ]] ; then
            print_replace_line "Removing  ${Red}$package...${NC}"
            done=$(sudo aptitude -y purge $package)
            print_replace_line "${Red}Removed:${NC}   %-20s ($filename)" $package
       else
            print_replace_line "${On_Red}Not found:${NC} %-20s ($filename), not removed" $package
       fi
    else
        echo "debug 3"
        if [ $(deb_check_if_file_installed $filename) == 'yes' ] ; then
           print_replace_line "Installed:  %-20s ($filename) ${Green}already${NC}" $package
        else
            echo "debug 4"
            print_replace_line "Installing:${Green}$package...${NC}"
            sudo gdebi -q -n -o APT::Install-Recommends=1 "$filename" 1>null 2>log-gdebi.txt
            # TODO if $? == 0
            #sudo apt-get install -fy
            if [[  $(deb_check_if_file_installed $filename) == 'yes' ]]; then
                print_replace_line "${Green}Installed:${NC}  %-20s ($filename)" $package
            else
                print_replace_line "${Red}Failed:${NC}  %-20s ($filename) there were problems during installation\n" $package
                cat log-gdebi.txt
            fi
        fi
    fi
  done
  if [ -n $2 ] ; then  popd; fi
  echo ' '
}

######################################################



# add ppa repository in $1 if the file is missing
unset -f ppa_add
ppa_add() {
  for i in "$@"; do
    grep -h "^deb.*$i" /etc/apt/sources.list.d/*.list > /dev/null 2>&1
    if [[ $? -ne 0 ]] ; then
      echo "Adding ppa:$i"
      sudo add-apt-repository -y ppa:$i
    else
      echo "ppa:$i already exists"
    fi
  done
}

# add a repository from a previous release
# URL in          $1
# release name in $2
# modifier in     $3
# update the repository list if $4 is 'update'
# usege: ppa_add_from_previous_release http://ppa.launchpad.net/alexx2000/doublecmd/ubuntu zesty update
unset -f  ppa_add_from_previous_release
ppa_add_from_previous_release () {
    grep -h "^deb.*$1" /etc/apt/sources.list.d/*.list > /dev/null 2>&1
    if [[ $? -ne 0 ]] ;  then
      sudo add-apt-repository -y "deb $1 $2 $3"
      if [[ "$4" == "update" ]]; then
         sudo apt-fast update
      fi
    else
      echo "ppa:$1 already exists"
    fi
}

# creates a new repository file $2
#                  with content $1
# adds a key with URL in        $3
# or add key $5 from server     $4
unset -f ppa_add_list_file_and_key
ppa_add_list_file_and_key() {
    if [[ -f /etc/apt/sources.list.d/$2 ]]; then
        echo "File $2 already exists"
    else
	sudo sh -c "echo $1 > /etc/apt/sources.list.d/$2"
	echo File /etc/apt/sources.list.d/$2 has  been created
    fi
    if [[ "$3" != "" ]] ; then
       wget -q -O - $3 | sudo apt-key add -
    else
       if [[ "$4" != "" ]] ; then
        sudo apt-key adv --keyserver $4 --recv-keys $5
       fi
    fi
}
